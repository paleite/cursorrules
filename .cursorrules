# .cursorrules

Below is a merged version of your existing `.cursorrules` with additional guidance on **chunking large tasks**, **maintaining context**, and **iterating** in **Cursor’s Composer**. This combined set of rules is designed to work on **existing** and **new** codebases, with an emphasis on Next.js, React (TypeScript), Tailwind CSS + ShadCN, Zod, and react-query.

---

## Before you start

- **Figure out which rules apply to the feature you’re implementing.**
  For example, if the feature involves data fetching, highlight rules about using `react-query` (and not `useEffect` or `fetch`). If it needs forms, refer to **react-hook-form** and **Zod**.

- **Repeat the relevant rules in your response.**
  This ensures transparency; the user will see which `.cursorrules` items you’re following (and how).

---

## Focus on the Most Important Mandates

**USE**:

- **react-query** for async data fetching and caching (instead of `useEffect` + `fetch`).
- **Zod** to validate **all** API responses and form inputs.
- **Tailwind CSS + ShadCN/UI + `cn()`** for styling and class composition.
- **react-hook-form** for all form handling.
- **Zustand** for non-context or persistent client-side state.
- **@ebay/nice-modal-react** for modals.

**AVOID**:

- `useEffect` for data fetching.
- `fetch()` directly; use a dedicated hook or API client instead.
- Inline styles; rely on Tailwind classes or `class-variance-authority`.
- Mutating data and `for`-loops; favor immutability and array methods (`map`, `filter`, etc.).

---

## Large Feature Implementation Guidelines

These guidelines detail how to plan, implement, and finalize features while **chunking** tasks for **Cursor’s Composer**. The goal is to avoid exceeding the LLM context window and to handle **big** features incrementally.

### 1. Planning Phase

1. **Check `progress.md`** for a corresponding feature section.

   - If none exists, create an outline in `[ ]` checklist format covering:
     - Feature scope & expected behavior.
     - Key components/modules to add or modify.
     - Filenames to create or change (and what they should contain).
     - Dependencies or prerequisite steps.
     - Potential edge cases & error handling.
     - Adherence to `.cursorrules` (Zod validations, react-query, tailwind, syntax & style, file structure, etc.).

2. **Define the High-Level Feature**

   - Clearly articulate what the feature needs to do and any constraints (like design specs or acceptance criteria).

3. **Chunk the Feature**
   - If the request is too large to fit into the LLM’s context, break it into smaller tasks or subtasks.
   - Label each subtask (e.g., “Subtask 1 of 5”).
   - This is like splitting an EDM set into multiple smaller segments—each one has its own distinct focus, but they form a unified whole.

### 2. Implementation Phase

1. **Work on a Single Chunk**

   - For each subtask, pass any relevant code snippets or references to Cursor.
   - If multiple files are affected, focus on smaller sections of code in each iteration.

2. **Context Carryover**

   - Remind Cursor what was done in previous chunks.
   - If Cursor “forgets,” re-supply the necessary code or instructions from the previous step.

3. **Feedback Loops**

   - After generating code for each chunk, review it.
   - If errors or inconsistencies appear, correct them or clarify your instructions.
   - Confirm or reject each subtask’s output before moving on.

4. **Keep `progress.md` Updated**
   - Check off finished tasks, add notes or revisions as needed.

### 3. Review & Documentation Phase

1. **Testing and Validation**

   - After each chunk or once the chunk is completed, run tests or do a manual check.
   - Fix issues in the code, either manually or by prompting Cursor.
   - For new or existing code, write or update relevant unit tests, integration tests, etc.

2. **Update Project Docs**

   - Document changes in `CHANGELOG.md`.
   - If your code has any complex logic or custom hooks, add inline comments or short usage docs.

3. **Confirm the Feature Meets the Outlined Goals**
   - Cross-check with the initial plan (in `progress.md`) to ensure no steps or edge cases are missed.

### 4. Finalization & Commit

1. **Integrate Changes**

   - Once all chunks are approved, unify them into the feature branch or main branch (depending on your branching strategy).

2. **Final Test & Code Review**

   - Do a final pass for formatting (ESLint, Prettier), project conventions, and run `typecheck` if applicable.

3. **Post Summary**
   - In `progress.md`, note that the feature is complete and reference any relevant PR or commit hashes.

---

## Additional Cursor Composer Guidance

1. **Short Context Window**

   - Acknowledge that Cursor’s context window has limits. For large code sections, break them into smaller snippets when you prompt.

2. **New vs. Existing Codebases**

   - These chunking and carryover rules apply equally whether you’re introducing a brand-new feature or modifying an established codebase.

3. **Resilient to Mistakes**

   - The LLM can introduce errors. Use iterative feedback loops: generate code, then review and correct.

4. **Adhere to Project Decisions**

   - Always remember to use the frameworks, libraries, and style decisions listed in “Focus on the Most Important Mandates.”

5. **User Confirmation**
   - After each subtask, prompt for user feedback or additional clarifications.

---

## File Structure

- **kebab-case** for filenames.
- **`.tsx`** for TypeScript with JSX; **`.ts`** otherwise.
- Test files: `[filename].test.ts` or `[filename].test.tsx`.

### Folder Structure

- Example structure:

```
src/
  app/  // The Next.js app structure (pages, layouts, etc.)
    users/  // Feature-specific files for the "users" feature
      page.ts // Imports the CreateUserForm
      create-user-form.tsx  // Exports a component using react-hook-form
      use-create-user-modal.tsx // Exports a hook from @ebay/nice-modal-react
  components/ // React components
    ui/ // Reusable UI components (e.g., ShadCN components)
    common/ // Reusable across multiple features
  contexts/ // React context providers
    auth-context.ts
    user-context.ts
  lib/  // Project-level libraries/utilities
    api.ts
    constants.ts
    postchain-client.ts
    utils/  // Generic utility functions
      format.ts
      convert.ts
  hooks/  // Global React hooks
  providers/  // React context providers
    auth-provider.ts
    user-provider.ts
  queries/  // React Query queries/mutations
    users-queries.ts
    posts-queries.ts
  schemas/  // Zod schemas
    user-schema.ts
    product-schema.ts
  stores/ // Zustand or other state management
    user-store.ts
    settings-store.ts
```

---

## Code Readability

- Prioritize **readability** over conciseness.
- Maintain **consistent naming**.
- Use **descriptive names** for functions, variables, and booleans (e.g., `isUserAuthenticated()`).
- Rename identifiers if their purpose changes.
- **When generating new code**:
  - Prefer **explicit** syntax over shorthand.
  - Example: `React.FunctionComponent` instead of `React.FC`, `disabled={true}` instead of just `disabled`.
- Comment and document any workarounds or suboptimal solutions.
- Break large functions into smaller, testable ones.
- Prefer early returns to reduce nesting.
- Avoid magic numbers; use named constants.
- Use capital letters for constants.

---

## Syntax & Programming Style

- Use nullish coalescing (`??`) over logical OR (`||`) for default values.
- Prefer immutable programming and pure functions.
- Use appropriate error types (`TypeError`, `RangeError`, etc.).
- Add default case type checking in `switch` statements.

---

## Command Line

- **When generating code** (not editing existing), use **long flags**:
  - `--no-emit` instead of `-n`.
  - `prettier --write .` instead of `prettier -w .`.
  - `next lint --config eslint.config.mjs` instead of `next lint -c eslint.config.mjs`.
- Document shell scripts thoroughly.
- Name environment variables clearly.
- Use descriptive names for scripts in `package.json`.
- Use colorized output for warnings/errors.
- Use explicit exit codes for error conditions.

---

## Node.js setup

- Ensure `.nvmrc` matches the Node.js version in use.
- In `package.json`, ensure `packageManager` matches the codebase’s package manager, and `engines.node` matches `.nvmrc`.
- Ensure `@types/node` is installed and matches the same Node.js version.

---

## `package.json` Scripts

Include (or ensure you have) scripts for:

- `build`
- `dev`
- `format`
- `lint`
- `prepare`
- `spellcheck`
- `start`
- `typecheck`

Example snippet to add if missing:

```json
{
  "scripts": {
    "lint": "eslint --cache",
    "format": "prettier --write .",
    "prepare": "husky",
    "spellcheck": "cspell --config=cspell.json \"**/*.{cjs,js,md,mjs,ts,tsx}\" --no-progress --show-context --show-suggestions",
    "typecheck": "tsc --noEmit"
  }
}
```

---

## `tsconfig.json`

- Use `@tsconfig/strictest`.
- Also use `@tsconfig/nodeXX` (replace XX with your Node version).
- Use `@tsconfig/next` if you’re on Next.js.

**Example** (Next.js):

```json
{
  "extends": [
    "@tsconfig/strictest/tsconfig.json",
    "@tsconfig/next/tsconfig.json"
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": { "@/*": ["./*"] }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
```

---

## Exports and Imports

- Remove unused exports regularly.
- Export next to declarations; avoid placing all exports at the file bottom.
- Avoid default exports (except in Next.js pages).
- Import with short paths (e.g., `@/components/ui`) and prefer `@/*` from the project root.
- Keep import paths as concise as possible.

---

## Tailwind CSS & ShadCN

- Use `import { cn } from "@/lib/utils";` to merge conditional classes.
- **Never** build class names with string concatenation.
- **Avoid inline styles**; rely on Tailwind or `class-variance-authority`.
- Extend Tailwind config for design tokens and to avoid “magic numbers.”
- Use **ShadCN** CSS variables for consistent theming (e.g., `bg-primary text-primary-foreground`).
- Use `cva` from `class-variance-authority` to handle component styling variations.

---

## TypeScript

- Leverage **discriminated unions** for state variations.
- Use `as const` to preserve literal types.
- Prefer `satisfies` over `as` for safer type compatibility.
- Default to `type` for local/complex unions, and `interface` for public or extendable contracts.
- Avoid `any`, `as`, and `is`; use `zod` for strict type checks.
- Employ utility types (`Partial`, `Pick`, `Omit`, etc.).
- Use the strictest TS config available.

---

## Zod

- **Always** validate incoming data with Zod (API, `unknown`, `any`, etc.).
- Use `.passthrough()` or `.object()` if extra props are acceptable.
- For array schemas, define a separate item schema.
- Provide sensible validation (e.g., non-empty strings, correct numeric ranges).
- Use **camelCase** for schema names:
  ```ts
  export const userResponseSchema = z.strictObject({ ... });
  export type UserResponse = z.infer<typeof userResponseSchema>;
  ```
- Recommend `z.strictObject`, but allow `.passthrough()` if needed.
- Use `z.infer` and **export** those types.
- For advanced validation, use `.refine()`, `.transform()`, `.lazy()`, and schema merging.

---

## @tanstack/react-query@5

### General Best Practices

- **NEVER** place `useQuery` or `useMutation` inside a component. Keep them in module scope.
- Use `queryKey`/`mutationKey` for precise cache invalidation.
- Use `select` to transform data for the UI.
- Invalidate queries when mutations affect cached data.
- Keep fetchers and transformers separate from query hooks:
  ```ts
  export const useUsersQuery = () =>
    useQuery({
      queryKey: ["users"],
      queryFn: getUsers,
      select: transformUsers,
    });
  ```
- Use `onSettled`, `onSuccess`, `onError` for mutation/query lifecycle.
- Configure `QueryCache`/`MutationCache` centrally (with Sentry if needed).
- Give hooks descriptive names like `useGetMemeCoinPriceQuery`.
- Match `queryKey` to your named operation plus arguments (e.g., `["get_meme_coin_price", tokenId]`).

---

## Chromia Postchain

1. **Use Zod** for validating all responses.
2. **Leverage react-query** for caching and data management.
3. **Group** queries/mutations by feature.
4. **Handle errors** with a centralized `QueryCache` and consider logging to Sentry.

---

## Form Handling

- Always use **react-hook-form**.
- Integrate Zod resolvers for runtime validation:

  ```ts
  import { useForm } from "react-hook-form";
  import { zodResolver } from "@hookform/resolvers/zod";

  export const useUserForm = () => {
    return useForm<z.infer<typeof userSchema>>({
      resolver: zodResolver(userSchema),
    });
  };
  ```

---

## Utility Functions

- Keep them pure, well-typed, and documented.
- Use descriptive names and proper error handling.

---

## React Hooks

- For async, **avoid** `useEffect` or `useCallback`; prefer react-query’s `useQuery`/`useMutation`.

---

## React

- For props, define a `[ComponentName]Props` type.
- Don’t inline `children` in the props type; use `PropsWithChildren`.
- **Custom Hooks** should do one job well, with consistent return signatures.

---

## API Integration

- Prefer `axios` with a config object (headers, base URL).
- **Always** validate responses with Zod.
- Separate API logic from UI.
- Avoid `fetch`; wrap logic in react-query hooks.

---

## Error Handling

- Use typed error formatters.
- Provide specific, helpful messages.
- Employ error boundaries when appropriate.

---

## Configuration Management

- Use typed configs for environment variables (e.g., `@t3-oss/env-nextjs`).
- Never call `process.env` directly.

---

## Integration with the Chromia Ecosystem

- Common libraries: `@chromia/ft4`, `postchain-client`.
- For Ethereum/multi-chain: `connectkit`, `wagmi` (built on `viem`).

---

## Conclusion

By combining these **Front-End Coding Best Practices** with the **chunking and iterative approach** for large features, you empower Cursor’s Composer to operate effectively on **new** or **existing** codebases, avoiding context window limits and ensuring that each subtask is validated and integrated properly. Remember to:

- **Break down** large tasks into subtasks.
- **Carry over context** explicitly when prompting.
- **Validate** each chunk with tests and user feedback.
- **Finalize** once all chunks align with `.cursorrules`.

This approach helps maintain a coherent, type-safe, and maintainable codebase while systematically leveraging Cursor’s capabilities.
